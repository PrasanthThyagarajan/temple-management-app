// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TempleApi.Data;

#nullable disable

namespace TempleApi.Migrations
{
    [DbContext(typeof(TempleDbContext))]
    partial class TempleDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("TempleApi.Domain.Entities.BaseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BaseEntity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TempleApi.Domain.Entities.Devotee", b =>
                {
                    b.HasBaseType("TempleApi.Domain.Entities.BaseEntity");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("TempleId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("TempleId");

                    b.HasDiscriminator().HasValue("Devotee");
                });

            modelBuilder.Entity("TempleApi.Domain.Entities.Donation", b =>
                {
                    b.HasBaseType("TempleApi.Domain.Entities.BaseEntity");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DevoteeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DonationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DonationType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("DonorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReceiptNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Pending");

                    b.Property<int>("TempleId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("DevoteeId");

                    b.HasIndex("TempleId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("TempleId")
                                .HasColumnName("Donation_TempleId");
                        });

                    b.HasDiscriminator().HasValue("Donation");
                });

            modelBuilder.Entity("TempleApi.Domain.Entities.Event", b =>
                {
                    b.HasBaseType("TempleApi.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("EntryFee")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxAttendees")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Organizer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Scheduled");

                    b.Property<int>("TempleId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("TempleId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("Email")
                                .HasColumnName("Event_Email");

                            t.Property("Phone")
                                .HasColumnName("Event_Phone");

                            t.Property("Status")
                                .HasColumnName("Event_Status");

                            t.Property("TempleId")
                                .HasColumnName("Event_TempleId");
                        });

                    b.HasDiscriminator().HasValue("Event");
                });

            modelBuilder.Entity("TempleApi.Domain.Entities.EventRegistration", b =>
                {
                    b.HasBaseType("TempleApi.Domain.Entities.BaseEntity");

                    b.Property<decimal?>("AmountPaid")
                        .HasColumnType("TEXT");

                    b.Property<string>("AttendeeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("DevoteeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("SpecialRequirements")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Registered");

                    b.HasIndex("DevoteeId");

                    b.HasIndex("EventId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("DevoteeId")
                                .HasColumnName("EventRegistration_DevoteeId");

                            t.Property("Email")
                                .HasColumnName("EventRegistration_Email");

                            t.Property("Phone")
                                .HasColumnName("EventRegistration_Phone");

                            t.Property("Status")
                                .HasColumnName("EventRegistration_Status");
                        });

                    b.HasDiscriminator().HasValue("EventRegistration");
                });

            modelBuilder.Entity("TempleApi.Domain.Entities.Service", b =>
                {
                    b.HasBaseType("TempleApi.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<int?>("MaxBookingsPerDay")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("TempleId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("TempleId");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("Service_Description");

                            t.Property("Name")
                                .HasColumnName("Service_Name");

                            t.Property("TempleId")
                                .HasColumnName("Service_TempleId");
                        });

                    b.HasDiscriminator().HasValue("Service");
                });

            modelBuilder.Entity("TempleApi.Domain.Entities.Temple", b =>
                {
                    b.HasBaseType("TempleApi.Domain.Entities.BaseEntity");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Deity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EstablishedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("Address")
                                .HasColumnName("Temple_Address");

                            t.Property("City")
                                .HasColumnName("Temple_City");

                            t.Property("Description")
                                .HasColumnName("Temple_Description");

                            t.Property("Email")
                                .HasColumnName("Temple_Email");

                            t.Property("Name")
                                .HasColumnName("Temple_Name");

                            t.Property("Phone")
                                .HasColumnName("Temple_Phone");

                            t.Property("PostalCode")
                                .HasColumnName("Temple_PostalCode");

                            t.Property("State")
                                .HasColumnName("Temple_State");
                        });

                    b.HasDiscriminator().HasValue("Temple");
                });

            modelBuilder.Entity("TempleApi.Domain.Entities.Devotee", b =>
                {
                    b.HasOne("TempleApi.Domain.Entities.Temple", "Temple")
                        .WithMany("Devotees")
                        .HasForeignKey("TempleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Temple");
                });

            modelBuilder.Entity("TempleApi.Domain.Entities.Donation", b =>
                {
                    b.HasOne("TempleApi.Domain.Entities.Devotee", "Devotee")
                        .WithMany("Donations")
                        .HasForeignKey("DevoteeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TempleApi.Domain.Entities.Temple", "Temple")
                        .WithMany("Donations")
                        .HasForeignKey("TempleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Devotee");

                    b.Navigation("Temple");
                });

            modelBuilder.Entity("TempleApi.Domain.Entities.Event", b =>
                {
                    b.HasOne("TempleApi.Domain.Entities.Temple", "Temple")
                        .WithMany("Events")
                        .HasForeignKey("TempleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Temple");
                });

            modelBuilder.Entity("TempleApi.Domain.Entities.EventRegistration", b =>
                {
                    b.HasOne("TempleApi.Domain.Entities.Devotee", "Devotee")
                        .WithMany("EventRegistrations")
                        .HasForeignKey("DevoteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TempleApi.Domain.Entities.Event", "Event")
                        .WithMany("Registrations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Devotee");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("TempleApi.Domain.Entities.Service", b =>
                {
                    b.HasOne("TempleApi.Domain.Entities.Temple", "Temple")
                        .WithMany("Services")
                        .HasForeignKey("TempleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Temple");
                });

            modelBuilder.Entity("TempleApi.Domain.Entities.Devotee", b =>
                {
                    b.Navigation("Donations");

                    b.Navigation("EventRegistrations");
                });

            modelBuilder.Entity("TempleApi.Domain.Entities.Event", b =>
                {
                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("TempleApi.Domain.Entities.Temple", b =>
                {
                    b.Navigation("Devotees");

                    b.Navigation("Donations");

                    b.Navigation("Events");

                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
